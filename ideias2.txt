# Esquema Completo ‚Äî LacrossShop Multilojas (Organizado e Detalhado)

## 1. Resumo do Projeto

- **Back-end:** Strapi v3.6.8 para gerenciamento de cat√°logo, clientes, pedidos e pagamentos.
- **Front-end:** Next.js 15 (App Router), consumindo a API Strapi e integrando Stripe, Mercado Pago e Asaas.

## 2. Modelagem Strapi v3.6.8: Estrutura Multiloja

### **Collection Type: Store**
Entidade "pai" para segmentar lojas.

- **Campos:**
  - `name` (string)
  - `slug` (uid)
  - `domain` (string, opcional)
  - `description` (text, opcional)
  - `logo` (media upload)
- **Rela√ß√µes:**
  - `products` (1-N com Product)
  - `categories` (1-N com Category)
  - `orders` (1-N com Order)
  - `customers` (1-N com Customer)

### **Collection Type: Product**
Produtos pertencentes a uma loja.

- **Campos:**
  - `name` (string)
  - `description` (text)
  - `price` (decimal)
  - `slug` (uid via name)
  - `images` (media upload, m√∫ltiplo)
  - `stock` (integer)
  - `variants` (component repeatable: product.variants)
- **Rela√ß√µes:**
  - `categories` (N-N com Category)
  - `store` (N-1 com Store)

### **Collection Type: Category**
Categorias por loja.

- **Campos:**
  - `name` (string)
  - `slug` (uid via name)
  - `featured` (boolean)
- **Rela√ß√µes:**
  - `products` (N-N com Product)
  - `store` (N-1 com Store)

### **Collection Type: Customer**
Clientes registrados por loja.

- **Campos:**
  - `fullName` (string)
  - `email` (email, √∫nico)
  - `phone` (string)
  - `address` (component shared.address)
- **Rela√ß√µes:**
  - `orders` (1-N com Order)
  - `store` (N-1 com Store)

### **Collection Type: Order**
Pedidos realizados para cada loja.

- **Campos:**
  - `total` (decimal)
  - `status` (enum: pending, confirmed, shipped, delivered, cancelled)
  - `items` (component repeatable: order.items)
  - `createdAt`, `updatedAt` (timestamps gerados pelo Strapi)
- **Rela√ß√µes:**
  - `customer` (1-1 com Customer)
  - `payment` (1-1 com Payment)
  - `store` (N-1 com Store)

### **Collection Type: Payment**
Pagamentos associados a pedidos.

- **Campos:**
  - `amount` (decimal)
  - `method` (enum: credit_card, boleto, pix, wallet)
  - `status` (enum: pending, paid, refused, refunded)
  - `gatewayId` (string)
- **Rela√ß√µes:**
  - `order` (1-1 com Order)
  - `store` (N-1 com Store)

## 3. Componentes Reutiliz√°veis

| Componente        | Categoria | Usado em  | Tipo         | Campos principais                         |
|-------------------|-----------|-----------|--------------|-------------------------------------------|
| **Variants**      | product   | Product   | Repeatable   | label, value, priceDelta                  |
| **Order Items**   | order     | Order     | Repeatable   | productId, quantity, subtotal             |
| **Address**       | shared    | Customer  | Single       | street, number, city, state, zip          |

**Como Criar Um Componente:**
1. Acesse **Content-Type Builder** ‚Üí **Components** ‚Üí **Create new component**.
2. Preencha:
   - **Display name:** Nome amig√°vel (ex: `Variants`)
   - **Category:** Digite para criar (ex: `product`, `order`, `shared`)
3. Clique em **Continue**, adicione campos (Text, Number, etc), finalize e salve.

## 4. Inserindo Componentes nos Models

1. Edite o Collection Type correspondente.
2. Clique em **Add another field**.
3. Escolha **Component** e selecione o desejado.
4. Defina se ser√° **Repeatable** (ex: `variants`, `items`) ou **Single** (ex: `address`).
5. Nomeie o campo, salve e aguarde atualiza√ß√£o da API.

üîÅ Como Usar os Componentes Nos Tipos de Cole√ß√£o:
Para usar em cada Collection Type:
Acesse Content-Type Builder

Edite o tipo: Product, Order ou Customer

Clique em Add another field

Escolha Component

Selecione o componente (Variants, Order Items, Address)

Marque:

Repeatable para Variants e Order Items

Single para Address

D√™ o nome do campo (variants, items, address)

Clique em Finish ‚Üí depois em Save
üì¶ Detalhamento Completo de Componentes ‚Äî NeoMercado (Strapi v3.6.8)
Abaixo est√° a tabela completa, detalhada e explicada de todos os componentes reutiliz√°veis necess√°rios na estrutura NeoMercado Multiloja, incluindo:

Nome do componente

Categoria (grupo visual no Strapi)

Onde √© usado (Collection Type)

Tipo (Repeatable ou Single)

Campos com tipo, descri√ß√£o e obrigatoriedade recomendada

üß© Componente: Variants
Item	Valor
Nome	Variants
Categoria	product
Usado em	Collection Type Product
Tipo	Repeatable
üìì Campos de Variants
Campo	Tipo	Descri√ß√£o	Obrigat√≥rio?
label	Text	Nome do atributo (ex: Tamanho, Cor)	‚úÖ Sim
value	Text	Valor espec√≠fico (ex: G, Azul)	‚úÖ Sim
priceDelta	Number	Altera√ß√£o no pre√ßo dessa variante	‚ùå Opcional
üîß Usado para construir varia√ß√µes de produto com comportamento customizado no VariantSelector do front-end.

üß© Componente: Order Items
Item	Valor
Nome	Order Items
Categoria	order
Usado em	Collection Type Order
Tipo	Repeatable
üìì Campos de Order Items
Campo	Tipo	Descri√ß√£o	Obrigat√≥rio?
productId	Number	ID do produto comprado	‚úÖ Sim
quantity	Number	Quantidade desse item no pedido	‚úÖ Sim
subtotal	Number	Valor total (produto √ó quantidade)	‚úÖ Sim
üîß Estrutura usada para registrar os produtos de um pedido, simplificando o hist√≥rico de compras no CMS. Voc√™ tamb√©m pode fazer product como Relation, se quiser salvar todos os dados do produto junto.

üß© Componente: Address
Item	Valor
Nome	Address
Categoria	shared
Usado em	Collection Type Customer
Tipo	Single
üìì Campos de Address
Campo	Tipo	Descri√ß√£o	Obrigat√≥rio?
street	Text	Rua	‚úÖ Sim
number	Text	N√∫mero	‚úÖ Sim
neighborhood	Text	Bairro	‚úÖ Sim
city	Text	Cidade	‚úÖ Sim
state	Text	Estado	‚úÖ Sim
zip	Text	CEP	‚úÖ Sim
üîß Componente reutiliz√°vel se futuramente quiser usar tamb√©m em Order ou Store.
## 5. Fluxo de Dados Multi-loja

- Todas as queries do front-end para o Strapi devem **filtrar por loja**:
  - `/products?store.slug=loja-x&_populate=categories,images`
  - `/categories?store.slug=loja-x`
- Use `storeSlug` ou `storeId` nas rotas/dados para garantir o escopo correto.
- Para banners/carross√©is por loja, crie categorias espec√≠ficas vinculadas √† loja.

##
‚úÖ O que fazer: Liberar permiss√µes para a fun√ß√£o "Public"
üìç Como acessar as permiss√µes:
Acesse o Strapi, v√° em:
Admin > Settings > Users & Permissions plugin > Roles
Ou direto por este link (j√° autenticado):
/admin/settings/users-permissions/roles

Clique na role: Public (essa √© usada pelo frontend sem login).

üîì O que liberar (essencial para e-commerce p√∫blico)
‚Üí Collection Type: category
A√ß√£o	Liberar?
find	‚úÖ Sim
findOne	‚úÖ Sim
‚Üí Collection Type: product
A√ß√£o	Liberar?
find	‚úÖ Sim
findOne	‚úÖ Sim
‚Üí Collection Type: store (opcional, mas recomendado se voc√™ usa /products?store.slug=...)
A√ß√£o	Liberar?
find	‚úÖ Sim
findOne	‚úÖ Sim

## 6. SEO & Sitemap

- Crie sitemaps e arquivos `/robots.txt` **separados para cada loja**:
  - `https://loja-x.meusite.com/sitemap.xml`
  - `https://loja-y.meusite.com/sitemap.xml`

## 7. Requisitos T√©cnicos, Integra√ß√µes e Ambiente

- Estrutura vi√°vel em Strapi v3.6.8 (√∫nica base, relacionamentos por loja).
- Aten√ß√£o: admin padr√£o exibe tudo, para isolar use roles & permissions avan√ßados.
- Alternativas: Strapi v4 (multi-tenant), m√∫ltiplas inst√¢ncias, outros CMS headless.
- **Pagamentos:** Front-end integra Stripe, Mercado Pago e Asaas via API.
- **Configura√ß√£o de ambiente:**

```env
# Strapi
NEXT_PUBLIC_STRAPI_URL=https://strapi.lacrosstech.com.br

# Stripe
STRIPE_SECRET_KEY=sk_live_...

# Mercado Pago
MERCADOPAGO_ACCESS_TOKEN=APP_USR-...

# Asaas
ASAAS_API_KEY=...
ASAAS_ENVIRONMENT=production

# Aplica√ß√£o
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

## 8. Benef√≠cios da Modelagem

- **Escalabilidade** (adiciona novas lojas facilmente)
- **Reutiliza√ß√£o** (componentes e rela√ß√µes)
- **Centraliza√ß√£o** (tudo em um √∫nico painel para m√∫ltiplas lojas)
- **Autonomia** (clientes editam conte√∫dos, produtos, banners, e mais no pr√≥prio CMS)

## Resumo Final

Essa modelagem torna o NeoMercado robusto, modular e 100% preparado para multiloja ‚Äî cada conte√∫do, produto, pedido e cliente pertence logicamente √† sua loja, o painel √© amig√°vel para qualquer operador e a integra√ß√£o com pagamentos modernos est√° garantida, pronta para escalar conforme voc√™ crescer[1].

